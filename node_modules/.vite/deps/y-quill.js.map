{
  "version": 3,
  "sources": ["../../y-quill/src/y-quill.js"],
  "sourcesContent": ["/**\n * @module bindings/quill\n */\n\nimport * as Y from 'yjs' // eslint-disable-line\n\n/**\n * @typedef {import('y-protocols/awareness').Awareness} Awareness\n\n/**\n * Removes the pending '\\n's if it has no attributes.\n */\nexport const normQuillDelta = delta => {\n  if (delta.length > 0) {\n    const d = delta[delta.length - 1]\n    const insert = d.insert\n    if (d.attributes === undefined && insert !== undefined && insert.slice(-1) === '\\n') {\n      delta = delta.slice()\n      let ins = insert.slice(0, -1)\n      while (ins.slice(-1) === '\\n') {\n        ins = ins.slice(0, -1)\n      }\n      delta[delta.length - 1] = { insert: ins }\n      if (ins.length === 0) {\n        delta.pop()\n      }\n      return delta\n    }\n  }\n  return delta\n}\n\n/**\n * @param {any} quillCursors\n */\nconst updateCursor = (quillCursors, aw, clientId, doc, type) => {\n  try {\n    if (aw && aw.cursor && clientId !== doc.clientID) {\n      const user = aw.user || {}\n      const color = user.color || '#ffa500'\n      const name = user.name || `User: ${clientId}`\n      quillCursors.createCursor(clientId.toString(), name, color)\n      const anchor = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(aw.cursor.anchor), doc)\n      const head = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(aw.cursor.head), doc)\n      if (anchor && head && anchor.type === type) {\n        quillCursors.moveCursor(clientId.toString(), { index: anchor.index, length: head.index - anchor.index })\n      }\n    } else {\n      quillCursors.removeCursor(clientId.toString())\n    }\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nexport class QuillBinding {\n  /**\n   * @param {Y.Text} type\n   * @param {any} quill\n   * @param {Awareness} [awareness]\n   */\n  constructor (type, quill, awareness) {\n    const doc = /** @type {Y.Doc} */ (type.doc)\n    this.type = type\n    this.doc = doc\n    this.quill = quill\n    const quillCursors = quill.getModule('cursors') || null\n    this.quillCursors = quillCursors\n    // This object contains all attributes used in the quill instance\n    this._negatedUsedFormats = {}\n    this.awareness = awareness\n    this._awarenessChange = ({ added, removed, updated }) => {\n      const states = /** @type {Awareness} */ (awareness).getStates()\n      added.forEach(id => {\n        updateCursor(quillCursors, states.get(id), id, doc, type)\n      })\n      updated.forEach(id => {\n        updateCursor(quillCursors, states.get(id), id, doc, type)\n      })\n      removed.forEach(id => {\n        quillCursors.removeCursor(id.toString())\n      })\n    }\n    /**\n     * @param {Y.YTextEvent} event\n     */\n    this._typeObserver = event => {\n      if (event.transaction.origin !== this) {\n        const eventDelta = event.delta\n        // We always explicitly set attributes, otherwise concurrent edits may\n        // result in quill assuming that a text insertion shall inherit existing\n        // attributes.\n        const delta = []\n        for (let i = 0; i < eventDelta.length; i++) {\n          const d = eventDelta[i]\n          if (d.insert !== undefined) {\n            delta.push(Object.assign({}, d, { attributes: Object.assign({}, this._negatedUsedFormats, d.attributes || {}) }))\n          } else {\n            delta.push(d)\n          }\n        }\n        quill.updateContents(delta, this)\n      }\n    }\n    type.observe(this._typeObserver)\n    this._quillObserver = (eventType, delta, state, origin) => {\n      if (delta && delta.ops) {\n        // update content\n        const ops = delta.ops\n        ops.forEach(op => {\n          if (op.attributes !== undefined) {\n            for (const key in op.attributes) {\n              if (this._negatedUsedFormats[key] === undefined) {\n                this._negatedUsedFormats[key] = false\n              }\n            }\n          }\n        })\n        if (origin !== this) {\n          doc.transact(() => {\n            type.applyDelta(ops)\n          }, this)\n        }\n      }\n      // always check selection\n      if (awareness && quillCursors) {\n        const sel = quill.getSelection()\n        const aw = /** @type {any} */ (awareness.getLocalState())\n        if (sel === null) {\n          if (awareness.getLocalState() !== null) {\n            awareness.setLocalStateField('cursor', /** @type {any} */ (null))\n          }\n        } else {\n          const anchor = Y.createRelativePositionFromTypeIndex(type, sel.index)\n          const head = Y.createRelativePositionFromTypeIndex(type, sel.index + sel.length)\n          if (!aw || !aw.cursor || !Y.compareRelativePositions(anchor, aw.cursor.anchor) || !Y.compareRelativePositions(head, aw.cursor.head)) {\n            awareness.setLocalStateField('cursor', {\n              anchor,\n              head\n            })\n          }\n        }\n        // update all remote cursor locations\n        awareness.getStates().forEach((aw, clientId) => {\n          updateCursor(quillCursors, aw, clientId, doc, type)\n        })\n      }\n    }\n    quill.on('editor-change', this._quillObserver)\n    // This indirectly initializes _negatedUsedFormats.\n    // Make sure that this call this after the _quillObserver is set.\n    quill.setContents(type.toDelta(), this)\n    // init remote cursors\n    if (quillCursors !== null && awareness) {\n      awareness.getStates().forEach((aw, clientId) => {\n        updateCursor(quillCursors, aw, clientId, doc, type)\n      })\n      awareness.on('change', this._awarenessChange)\n    }\n  }\n\n  destroy () {\n    this.type.unobserve(this._typeObserver)\n    this.quill.off('editor-change', this._quillObserver)\n    if (this.awareness) {\n      this.awareness.off('change', this._awarenessChange)\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["aw"]
}
